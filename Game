/*******************************************************/
// Plat runner
// Written by Jeven
/*******************************************************/
console.log("plat runner loaded");
var nextSpawn = 0;
var diffSpawn = 0;
var player;
var platform;
var screenSelector = "game"
let touchingPlatform = false; // Variable to track whether the player is touching a platform
let jumping = false; // Variable to track whether the player is currently jumping
var lives = 3;
var score = 0;
var missile;
var platformMid;
var timer = 0;
var spawn;
var wallBot;
const MISSILEWIDTH=50;
const MISSILELENGTH=10;
const PLATFORMWIDTH=10;
const PLATFORMLENGTH=300;




/*******************************************************/
// preload()
// Called by P5 before setup
/*******************************************************/
function preload() {
	imgBG = loadImage('Background.png');
	imgLives = loadImage('Heart.png');
	imgPlat = loadImage('plat.png');
	imgMis = loadImage('missile.png');

}
/*******************************************************/
// setup()

/*if.name.mouse.presses(){
    screenSelector==

}
*/
/*******************************************************/

function setup() {
	console.log("setup: ");
	console.log("event ");

	world.gravity.y = 10;
	cnv = new Canvas(windowWidth, windowHeight);
	missiles = new Group();
	if (screenSelector == "game") {
		resetGame();
		walls();
		playermove();
		spawnPlatform();
		platforms = new Group();
	}

}



/*******************************************************/
// draw()
/*******************************************************/
function draw() {
	if (screenSelector == "game") {
		gameScreen();

	}

	for (let i = 0; i < lives; i++) {
		image(imgLives, 35 * i, 0);
		imgLives.resize(50, 50);
	}
}



function spawnPlatform() {
	spawn = new Sprite(200, 555, PLATFORMLENGTH, PLATFORMWIDTH, 'k')
	spawn.velocity.x = -2;
	spawn.color = "blue";
	spawn.addImage(imgPlat);
	imgPlat.resize(300, 50);


}


function newPlatform() {
	platform = new Sprite(500, 400, PLATFORMLENGTH, PLATFORMWIDTH, 'k')
	platform.velocity.x = -6;
	platform.color = "blue";
	platform.addImage(imgPlat);
	imgPlat.resize(300, 10);

}


function newMissile() {
	missile = new Sprite(500, 400, MISSILEWIDTH, MISSILELENGTH, 'k')
	missile.velocity.x = -6;
	missile.color = "red";
	missile.addImage(imgMis);

}

//missile system
function missileHitPlayer(_player, _missile) {
	//Missile hits player then loses 1 health if loses all 3 they die
	lives--;
	console.log("player hit");
	missile.remove();
}

//game
function gameScreen() {

	screenSelector = "game";
	background(imgBG);
	allSprites.visible = true;
	//platforms coming in
	if (frameCount + 1 > nextSpawn) {
		newPlatform();
		nextSpawn = frameCount + random(15, 50);
		platform.y = Math.random() * windowHeight + 500;
		platform.x = Math.random() * windowWidth + 800;
		platform.addImage(imgPlat);
		imgPlat.resize(300, 50);
		console.log(platform.y);
		platforms.add(platform);
	}
	if (player.y > 800) {}
	//missiles coming in
	if (frameCount > diffSpawn) {
		newMissile();
		diffSpawn = frameCount + random(10, 120);
		missile.y = Math.random() * windowHeight + 250;
		missile.x = Math.random() * windowWidth + 800;
		missile.velocity.x = -(Math.random() * 15 + 10);
		console.log(missile.y);
		missile.addImage(imgMis);
		imgMis.resize(200, 200);
	}

	player.collides(wallBot, playerHitwallBot);
	player.collides(wallTop, playerHitwallBot);

	player.collides(wallRH, playerHitwallBot);

	player.collides(wallLH, playerHitwallLH);
	player.collides(missile, missileHitPlayer);
		player.collides(player, playerHitPlatform);
		player.collides(player,playerLeavePlatform);

	if (player.y > 800) {
		camera.y = player.y;
		imgBG.y = player.y;
	}

	console.log(missile.velocity.x);
	score++;
	text(score, 150, 25);

	if (lives <= 0) {
		background("black");
		removeAllSprites();
		text("Loading", 500, 250);
		text.color = 'blue';
		text.Size = 20;
		window.location = 'end.html'; //change to window.location
	}
	sessionStorage.setItem('score', score)
}




//creating walls
function walls() {
	wallLH = new Sprite(-100, height / 2, 8, height, 'k');
	wallLH.color = 'black';

	wallRH = new Sprite(windowWidth + 100, height / 2, 8, height, 'k');
	wallRH.color = 'blue';

	wallTop = new Sprite(0, -100, windowWidth * 2, 8, 'k');
	wallTop.color = 'green';

	wallBot = new Sprite(0, 3000, windowWidth * 2, 1000, 'k');
	console.log(wallBot.y);
}

//player movement
function playermove() {

	document.addEventListener("keydown", function(event) {
		if (event.code === 'KeyA') {
			player.vel.x = -5;
		} else if (event.code === 'KeyD') {
			player.vel.x = 5;
		}
	});

	document.addEventListener("keyup", function(event) {
		if ((event.code === 'KeyA' && player.vel.x < 0) || (event.code === 'KeyD' && player.vel.x > 0)) {
			player.vel.x = 0;
		}
	});

	document.addEventListener("keydown", function(event) {
		console.log('Pressed key:', event.code);
		if (event.code === 'KeyW' && touchingPlatform ) {
			player.vel.y = -6;
			jumping = true; // Set jumping to true when jumping
			console.log('Jumping:', jumping);
		}
	});

	document.addEventListener("keyup", function(event) {
		if (event.code === 'KeyW') {
			if (player.vel.y < 0) { // Only cancel jump if player is currently moving upwards
				player.vel.y = 0;
			}
		}
	});

	// Additional event listener to handle the jump release
	document.addEventListener("keyup", function(event) {
		if (event.code === 'KeyW') {
			jumping = false; // Reset jumping to false when jump key is released
			console.log('Jumping:', jumping);
		}
	});


}
//player hits platforms and enables one jump
function playerHitPlatform(_player,_platforms) {
	touchingPlatform = true; // Set touchingPlatform to true when player touches platform
	console.log("platform hit");
}

function playerLeavePlatform(_player,_platforms) {
	touchingPlatform = false; // Set touchingPlatform to false when player leaves platform
	console.log("platform left");
}


//player hits Left hand wall and dies 
function playerHitwallLH(_player, _wallLH) {
    window.location = 'end.html';
	background("black");
	text("Loading", windowWidth / 2, windowHeight / 2)
	console.log("Player hit left wall died");
	removeAllSprites();
	text("Loading", 500, 250);
	text.color = 'blue';
	text.Size = 20;
}
// Player hits bottom wall and dies
function playerHitwallBot(_player, _wallBot) {
    window.location = 'end.html';
    background("black");
	text("Loading", windowWidth / 2, windowHeight / 2)
	console.log("Player hit top wall died");
	removeAllSprites();
	text("Loading", 500, 250);
	text.color = 'white';
	text.Size = 20;

}
//prevent sprite to go off map 
function playerHitwallTop(_player, _wallTop) {
    window.location = 'end.html';
	background("black");
	text("Loading", windowWidth / 2, windowHeight / 2)
	console.log("Player hit top wall died");
	removeAllSprites();
	text("Loading", 500, 250);
	text.color = 'blue';
	text.Size = 20;
}
//prevent sprite to go off map
function playerHitwallRH(_player, _wallRH) {
    window.location = 'end.html';
	background("black");
	text("Loading", windowWidth / 2, windowHeight / 2)
	console.log("Player hit right wall died");
	removeAllSprites();
	text("Loading", 500, 250);
	text.color = 'blue';
	text.Size = 20;
}



//resets the game
function resetGame() {
	player = new Sprite(100, 500, 50);
	player.color = 'cyan';
	player.friction = 10;
	textSize(24);
	lives = 3;
}


/*******************************************************/
//  END OF APP
/*******************************************************/
